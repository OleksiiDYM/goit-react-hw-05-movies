{"version":3,"file":"static/js/638.14df1000.chunk.js","mappings":"sOAEaA,E,OAAmBC,GAAAA,IAAH,sS,SC6B7B,EA1BgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,IAAU,WAAtBD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBN,GAASO,KAAKH,EACjC,GAAE,CAACJ,KAGF,SAACF,EAAD,UACGK,EAAQK,OAAS,GAChB,wBACGL,EAAQM,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,wBAAKD,KACL,uBAAIC,MAFGF,EADE,OAQf,uBAAG,8CAIV,C,0PCzBDG,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGX,IAAMC,EAAU,kCAEHC,EAAa,mCAAG,uGACpBH,EAAAA,EAAAA,IAAA,uBAAiCN,MAAK,qBAAGU,KAAQC,QAC9CT,KAAI,gBAAGC,EAAH,EAAGA,GAAIS,EAAP,EAAOA,MAAoBC,EAA3B,EAAcC,YAAd,MAAyC,CACnDX,GAAAA,EACAS,MAAAA,EACAC,OAAQL,EAAUK,EAHR,GAD+B,KADlB,2CAAH,qDAUbE,EAAY,mCAAG,WAAMC,GAAN,0FACnBV,EAAAA,EAAAA,IAAA,8BACuBU,IAC3BhB,MAAK,qBAAGU,KAAQC,QACPT,KAAI,gBAAGC,EAAH,EAAGA,GAAIS,EAAP,EAAOA,MAAoBC,EAA3B,EAAcC,YAAd,MAAyC,CACnDX,GAAAA,EACAS,MAAAA,EACAC,OAAQA,EAASL,EAAUK,EAASI,EAH1B,GADR,KAHkB,2CAAH,sDAYZC,EAAoB,SAAAzB,GAC/B,OAAOa,EAAAA,EAAAA,IAAA,iBACUb,EADV,MAEJO,MACC,oBACEU,KACEP,EAFJ,EAEIA,GACaU,EAHjB,EAGIC,YACAF,EAJJ,EAIIA,MACcO,EALlB,EAKIC,aACcC,EANlB,EAMIC,aACAC,EAPJ,EAOIA,SACAC,EARJ,EAQIA,OARJ,MAUO,CACLrB,GAAAA,EACAU,OAAQL,EAAUK,EAClBD,MAAAA,EACAO,YAAa,IAAIM,KAAKN,GAAaO,cACnCL,UAAWM,KAAKC,MAAkB,GAAZP,GACtBE,SAAAA,EACAC,OAAAA,EAjBF,GAoBL,EAEYK,EAAoB,SAAApC,GAC/B,OAAOa,EAAAA,EAAAA,IAAA,iBAAoBb,EAApB,cAAwCO,MAAK,qBAAGU,KAAQoB,KACxD5B,KAAI,gBAAGC,EAAH,EAAGA,GAAI4B,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAyBC,EAAtC,EAAwBC,aAAxB,MAAmD,CAC1D/B,GAAAA,EACA4B,KAAAA,EACAC,UAAAA,EACAC,MAAOA,EAAQzB,EAAUyB,E,k0MAJlB,GADyC,GAQrD,EAEYlC,EAAoB,SAAAN,GAC/B,OAAOa,EAAAA,EAAAA,IAAA,iBAAoBb,EAApB,cAAwCO,MAAK,qBAAGU,KAAQC,QACrDT,KAAI,kBAA8B,CACxCC,GADU,EAAGA,GAEbC,OAFU,EAAOA,OAGjBC,QAHU,EAAeA,QAAf,GADsC,GAOrD,C","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/Api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsContainer = styled.div`\n  display: flex;\n  padding: 30px;\n  background-color: #3f51b542;\n  margin: 20px 30px 30px;\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  flex-direction: column;\n  align-items: center;\n`;\n","import { fetchMovieReviews } from '../../services/Api';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { ReviewsContainer } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams('movieId');\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    fetchMovieReviews(movieId).then(setReviews);\n  }, [movieId]);\n\n  return (\n    <ReviewsContainer>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h3>{author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don`t have any reviews for this movie</p>\n      )}\n    </ReviewsContainer>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport defaultPhoto from '../components/Images/default.jpg';\nimport defaultMoviePhoto from '../components/Images/defaultMovie.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: 'd49e0110fba862765bd35e51be725d3a',\n};\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const fetchTrending = async () => {\n  return axios.get(`/trending/all/week?`).then(({ data: { results } }) =>\n    results.map(({ id, title, poster_path: poster }) => ({\n      id,\n      title,\n      poster: IMG_URL + poster,\n    }))\n  );\n};\n\nexport const fetchByQuery = async query => {\n  return axios\n    .get(`/search/movie?query=${query}`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, title, poster_path: poster }) => ({\n        id,\n        title,\n        poster: poster ? IMG_URL + poster : defaultMoviePhoto,\n      }))\n    );\n};\n\nexport const fetchMovieDetails = movieId => {\n  return axios\n    .get(`/movie/${movieId}?`)\n    .then(\n      ({\n        data: {\n          id,\n          poster_path: poster,\n          title,\n          release_date: releaseYear,\n          vote_average: userScore,\n          overview,\n          genres,\n        },\n      }) => ({\n        id,\n        poster: IMG_URL + poster,\n        title,\n        releaseYear: new Date(releaseYear).getFullYear(),\n        userScore: Math.round(userScore * 10),\n        overview,\n        genres,\n      })\n    );\n};\n\nexport const fetchMovieCredits = movieId => {\n  return axios.get(`/movie/${movieId}/credits?`).then(({ data: { cast } }) =>\n    cast.map(({ id, name, character, profile_path: photo }) => ({\n      id,\n      name,\n      character,\n      photo: photo ? IMG_URL + photo : defaultPhoto,\n    }))\n  );\n};\n\nexport const fetchMovieReviews = movieId => {\n  return axios.get(`/movie/${movieId}/reviews?`).then(({ data: { results } }) =>\n    results.map(({ id, author, content }) => ({\n      id,\n      author,\n      content,\n    }))\n  );\n};\n"],"names":["ReviewsContainer","styled","movieId","useParams","useState","reviews","setReviews","useEffect","fetchMovieReviews","then","length","map","id","author","content","axios","api_key","IMG_URL","fetchTrending","data","results","title","poster","poster_path","fetchByQuery","query","defaultMoviePhoto","fetchMovieDetails","releaseYear","release_date","userScore","vote_average","overview","genres","Date","getFullYear","Math","round","fetchMovieCredits","cast","name","character","photo","profile_path"],"sourceRoot":""}